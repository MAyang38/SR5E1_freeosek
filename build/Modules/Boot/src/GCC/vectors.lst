   1              	# 1 "Modules/Boot/src/GCC/vectors.S"
   1              	/****************************************************************************
   0              	
   0              	
   0              	
   2              	 *
   3              	 * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4              	 *
   5              	 * License terms: STMicroelectronics Proprietary in accordance with licensing
   6              	 * terms SLA0098 at www.st.com.
   7              	 *
   8              	 * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9              	 * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10              	 *
  11              	 *****************************************************************************/
  12              	/**
  13              	 * @file    GCC/vectors.S
  14              	 * @brief   Interrupt vectors for ARMv7-M devices.
  15              	 *
  16              	 * @addtogroup BOOT
  17              	 * @{
  18              	 */
  19              	
  20              	#define _FROM_ASM_
  21              	#include "cmparams.h"
   1              	/****************************************************************************
   2              	 *
   3              	 * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4              	 *
   5              	 * License terms: STMicroelectronics Proprietary in accordance with licensing
   6              	 * terms SLA0098 at www.st.com.
   7              	 *
   8              	 * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9              	 * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10              	 *
  11              	 *****************************************************************************/
  12              	/**
  13              	 * @file    cmparams.h
  14              	 * @brief   ARM Cortex-M7 parameters for SR5E1.
  15              	 *
  16              	 * @addtogroup BOOT
  17              	 * @{
  18              	 */
  19              	
  20              	#ifndef CMPARAMS_H
  21              	#define CMPARAMS_H
  22              	
  23              	/**
  24              	 * @brief   Cortex core model.
  25              	 */
  26              	#define CORTEX_MODEL            7
  27              	
  28              	/**
  29              	 * @brief   Floating Point unit presence.
  30              	 */
  31              	#define CORTEX_HAS_FPU          1
  32              	
  33              	/**
  34              	 * @brief   Number of bits in priority masks.
  35              	 */
  36              	#define CORTEX_PRIORITY_BITS    4
  37              	
  38              	/**
  39              	 * @brief   Number of interrupt vectors.
  40              	 * @note    This number does not include the 16 system vectors and must be
  41              	 *          rounded to a multiple of 8.
  42              	 */
  43              	#define CORTEX_NUM_VECTORS      176
  44              	
  22              	#include "toolchain.h"
   1              	/****************************************************************************
   2              	 *
   3              	 * Copyright (c) 2022 STMicroelectronics - All Rights Reserved
   4              	 *
   5              	 * License terms: STMicroelectronics Proprietary in accordance with licensing
   6              	 * terms SLA0098 at www.st.com.
   7              	 *
   8              	 * THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED,
   9              	 * INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  10              	 *
  11              	 *****************************************************************************/
  12              	/**
  13              	 * @file    toolchain.h
  14              	 * @brief   toolchain for ARM compilers.
  15              	 *
  16              	 * @addtogroup PLATFORM
  17              	 * @addtogroup MCU
  18              	 * @ingroup PLATFORM
  19              	 * @{
  20              	 */
  21              	
  22              	#ifndef _TOOLCHAIN_H_
  23              	#define _TOOLCHAIN_H_
  24              	
  25              	/***************/
  26              	/* Green Hills */
  27              	/***************/
  28              	#if defined(__ghs__)
  29              	
  30              	#define _ASM_THUMB_               .thumb2
  31              	
  32              	#define _ASM_THUMB_FUNCTION_
  33              	
  34              	/****************/
  35              	/* HIGHTEC, GCC */
  36              	/****************/
  37              	#else
  38              	
  39              	#define _ASM_THUMB_               .thumb
  40              	
  41              	#define _ASM_THUMB_FUNCTION_      .thumb_func
  42              	
  23              	
  24              	#if (CORTEX_NUM_VECTORS % 8) != 0
  25              	#error "the constant CORTEX_NUM_VECTORS must be a multiple of 8"
  26              	#endif
  27              	
  28              	#if (CORTEX_NUM_VECTORS < 8) || (CORTEX_NUM_VECTORS > 240)
  29              	#error "the constant CORTEX_NUM_VECTORS must be between 8 and 240 inclusive"
  30              	#endif
  31              	
  32              	/*===========================================================================*/
  33              	/* Code section.                                                             */
  34              	/*===========================================================================*/
  35              	
  36              	#if !defined(__DOXYGEN__)
  37              	
  38              	        .thumb
  39              	        .section .vectors, "ax"
  40              	
  41              	        .global _vectors
  42              	        _ASM_THUMB_FUNCTION_
  43              	_vectors:
  44 0000 00000000 	        .long       __main_stack_end__
  45 0004 00000000 	        .long       Reset_Handler
  46 0008 00000000 	        .long       NMI_Handler
  47 000c 00000000 	        .long       HardFault_Handler
  48 0010 00000000 	        .long       MemManage_Handler
  49 0014 00000000 	        .long       BusFault_Handler
  50 0018 00000000 	        .long       UsageFault_Handler
  51 001c 00000000 	        .long       Vector1C
  52 0020 00000000 	        .long       Vector20
  53 0024 00000000 	        .long       Vector24
  54 0028 00000000 	        .long       Vector28
  55 002c 00000000 	        .long       SVC_Handler
  56 0030 00000000 	        .long       DebugMon_Handler
  57 0034 00000000 	        .long       Vector34
  58 0038 00000000 	        .long       PendSV_Handler
  59 003c 00000000 	        .long       SysTick_Handler
  60 0040 00000000 	        .long       Vector40,   Vector44,   Vector48,   Vector4C
  60      00000000 
  60      00000000 
  60      00000000 
  61              	#if CORTEX_NUM_VECTORS > 4
  62 0050 00000000 	        .long       Vector50,   Vector54,   Vector58,   Vector5C
  62      00000000 
  62      00000000 
  62      00000000 
  63              	#endif
  64              	#if CORTEX_NUM_VECTORS > 8
  65 0060 00000000 	        .long       Vector60,   Vector64,   Vector68,   Vector6C
  65      00000000 
  65      00000000 
  65      00000000 
  66              	#endif
  67              	#if CORTEX_NUM_VECTORS > 12
  68 0070 00000000 	        .long       Vector70,   Vector74,   Vector78,   Vector7C
  68      00000000 
  68      00000000 
  68      00000000 
  69              	#endif
  70              	#if CORTEX_NUM_VECTORS > 16
  71 0080 00000000 	        .long       Vector80,   Vector84,   Vector88,   Vector8C
  71      00000000 
  71      00000000 
  71      00000000 
  72              	#endif
  73              	#if CORTEX_NUM_VECTORS > 20
  74 0090 00000000 	        .long       Vector90,   Vector94,   Vector98,   Vector9C
  74      00000000 
  74      00000000 
  74      00000000 
  75              	#endif
  76              	#if CORTEX_NUM_VECTORS > 24
  77 00a0 00000000 	        .long       VectorA0,   VectorA4,   VectorA8,   VectorAC
  77      00000000 
  77      00000000 
  77      00000000 
  78              	#endif
  79              	#if CORTEX_NUM_VECTORS > 28
  80 00b0 00000000 	        .long       VectorB0,   VectorB4,   VectorB8,   VectorBC
  80      00000000 
  80      00000000 
  80      00000000 
  81              	#endif
  82              	#if CORTEX_NUM_VECTORS > 32
  83 00c0 00000000 	        .long       VectorC0,   VectorC4,   VectorC8,   VectorCC
  83      00000000 
  83      00000000 
  83      00000000 
  84              	#endif
  85              	#if CORTEX_NUM_VECTORS > 36
  86 00d0 00000000 	        .long       VectorD0,   VectorD4,   VectorD8,   VectorDC
  86      00000000 
  86      00000000 
  86      00000000 
  87              	#endif
  88              	#if CORTEX_NUM_VECTORS > 40
  89 00e0 00000000 	        .long       VectorE0,   VectorE4,   VectorE8,   VectorEC
  89      00000000 
  89      00000000 
  89      00000000 
  90              	#endif
  91              	#if CORTEX_NUM_VECTORS > 44
  92 00f0 00000000 	        .long       VectorF0,   VectorF4,   VectorF8,   VectorFC
  92      00000000 
  92      00000000 
  92      00000000 
  93              	#endif
  94              	#if CORTEX_NUM_VECTORS > 48
  95 0100 00000000 	        .long       Vector100,  Vector104,  Vector108,  Vector10C
  95      00000000 
  95      00000000 
  95      00000000 
  96              	#endif
  97              	#if CORTEX_NUM_VECTORS > 52
  98 0110 00000000 	        .long       Vector110,  Vector114,  Vector118,  Vector11C
  98      00000000 
  98      00000000 
  98      00000000 
  99              	#endif
 100              	#if CORTEX_NUM_VECTORS > 56
 101 0120 00000000 	        .long       Vector120,  Vector124,  Vector128,  Vector12C
 101      00000000 
 101      00000000 
 101      00000000 
 102              	#endif
 103              	#if CORTEX_NUM_VECTORS > 60
 104 0130 00000000 	        .long       Vector130,  Vector134,  Vector138,  Vector13C
 104      00000000 
 104      00000000 
 104      00000000 
 105              	#endif
 106              	#if CORTEX_NUM_VECTORS > 64
 107 0140 00000000 	        .long       Vector140,  Vector144,  Vector148,  Vector14C
 107      00000000 
 107      00000000 
 107      00000000 
 108              	#endif
 109              	#if CORTEX_NUM_VECTORS > 68
 110 0150 00000000 	        .long       Vector150,  Vector154,  Vector158,  Vector15C
 110      00000000 
 110      00000000 
 110      00000000 
 111              	#endif
 112              	#if CORTEX_NUM_VECTORS > 72
 113 0160 00000000 	        .long       Vector160,  Vector164,  Vector168,  Vector16C
 113      00000000 
 113      00000000 
 113      00000000 
 114              	#endif
 115              	#if CORTEX_NUM_VECTORS > 76
 116 0170 00000000 	        .long       Vector170,  Vector174,  Vector178,  Vector17C
 116      00000000 
 116      00000000 
 116      00000000 
 117              	#endif
 118              	#if CORTEX_NUM_VECTORS > 80
 119 0180 00000000 	        .long       Vector180,  Vector184,  Vector188,  Vector18C
 119      00000000 
 119      00000000 
 119      00000000 
 120              	#endif
 121              	#if CORTEX_NUM_VECTORS > 84
 122 0190 00000000 	        .long       Vector190,  Vector194,  Vector198,  Vector19C
 122      00000000 
 122      00000000 
 122      00000000 
 123              	#endif
 124              	#if CORTEX_NUM_VECTORS > 88
 125 01a0 00000000 	        .long       Vector1A0,  Vector1A4,  Vector1A8,  Vector1AC
 125      00000000 
 125      00000000 
 125      00000000 
 126              	#endif
 127              	#if CORTEX_NUM_VECTORS > 92
 128 01b0 00000000 	        .long       Vector1B0,  Vector1B4,  Vector1B8,  Vector1BC
 128      00000000 
 128      00000000 
 128      00000000 
 129              	#endif
 130              	#if CORTEX_NUM_VECTORS > 96
 131 01c0 00000000 	        .long       Vector1C0,  Vector1C4,  Vector1C8,  Vector1CC
 131      00000000 
 131      00000000 
 131      00000000 
 132              	#endif
 133              	#if CORTEX_NUM_VECTORS > 100
 134 01d0 00000000 	        .long       Vector1D0,  Vector1D4,  Vector1D8,  Vector1DC
 134      00000000 
 134      00000000 
 134      00000000 
 135              	#endif
 136              	#if CORTEX_NUM_VECTORS > 104
 137 01e0 00000000 	        .long       Vector1E0,  Vector1E4,  Vector1E8,  Vector1EC
 137      00000000 
 137      00000000 
 137      00000000 
 138              	#endif
 139              	#if CORTEX_NUM_VECTORS > 108
 140 01f0 00000000 	        .long       Vector1F0,  Vector1F4,  Vector1F8,  Vector1FC
 140      00000000 
 140      00000000 
 140      00000000 
 141              	#endif
 142              	#if CORTEX_NUM_VECTORS > 112
 143 0200 00000000 	        .long       Vector200,  Vector204,  Vector208,  Vector20C
 143      00000000 
 143      00000000 
 143      00000000 
 144              	#endif
 145              	#if CORTEX_NUM_VECTORS > 116
 146 0210 00000000 	        .long       Vector210,  Vector214,  Vector218,  Vector21C
 146      00000000 
 146      00000000 
 146      00000000 
 147              	#endif
 148              	#if CORTEX_NUM_VECTORS > 120
 149 0220 00000000 	        .long       Vector220,  Vector224,  Vector228,  Vector22C
 149      00000000 
 149      00000000 
 149      00000000 
 150              	#endif
 151              	#if CORTEX_NUM_VECTORS > 124
 152 0230 00000000 	        .long       Vector230,  Vector234,  Vector238,  Vector23C
 152      00000000 
 152      00000000 
 152      00000000 
 153              	#endif
 154              	#if CORTEX_NUM_VECTORS > 128
 155 0240 00000000 	        .long       Vector240,  Vector244,  Vector248,  Vector24C
 155      00000000 
 155      00000000 
 155      00000000 
 156              	#endif
 157              	#if CORTEX_NUM_VECTORS > 132
 158 0250 00000000 	        .long       Vector250,  Vector254,  Vector258,  Vector25C
 158      00000000 
 158      00000000 
 158      00000000 
 159              	#endif
 160              	#if CORTEX_NUM_VECTORS > 136
 161 0260 00000000 	        .long       Vector260,  Vector264,  Vector268,  Vector26C
 161      00000000 
 161      00000000 
 161      00000000 
 162              	#endif
 163              	#if CORTEX_NUM_VECTORS > 140
 164 0270 00000000 	        .long       Vector270,  Vector274,  Vector278,  Vector27C
 164      00000000 
 164      00000000 
 164      00000000 
 165              	#endif
 166              	#if CORTEX_NUM_VECTORS > 144
 167 0280 00000000 	        .long       Vector280,  Vector284,  Vector288,  Vector28C
 167      00000000 
 167      00000000 
 167      00000000 
 168              	#endif
 169              	#if CORTEX_NUM_VECTORS > 148
 170 0290 00000000 	        .long       Vector290,  Vector294,  Vector298,  Vector29C
 170      00000000 
 170      00000000 
 170      00000000 
 171              	#endif
 172              	#if CORTEX_NUM_VECTORS > 152
 173 02a0 00000000 	        .long       Vector2A0,  Vector2A4,  Vector2A8,  Vector2AC
 173      00000000 
 173      00000000 
 173      00000000 
 174              	#endif
 175              	#if CORTEX_NUM_VECTORS > 156
 176 02b0 00000000 	        .long       Vector2B0,  Vector2B4,  Vector2B8,  Vector2BC
 176      00000000 
 176      00000000 
 176      00000000 
 177              	#endif
 178              	#if CORTEX_NUM_VECTORS > 160
 179 02c0 00000000 	        .long       Vector2C0,  Vector2C4,  Vector2C8,  Vector2CC
 179      00000000 
 179      00000000 
 179      00000000 
 180              	#endif
 181              	#if CORTEX_NUM_VECTORS > 164
 182 02d0 00000000 	        .long       Vector2D0,  Vector2D4,  Vector2D8,  Vector2DC
 182      00000000 
 182      00000000 
 182      00000000 
 183              	#endif
 184              	#if CORTEX_NUM_VECTORS > 168
 185 02e0 00000000 	        .long       Vector2E0,  Vector2E4,  Vector2E8,  Vector2EC
 185      00000000 
 185      00000000 
 185      00000000 
 186              	#endif
 187              	#if CORTEX_NUM_VECTORS > 172
 188 02f0 00000000 	        .long       Vector2F0,  Vector2F4,  Vector2F8,  Vector2FC
 188      00000000 
 188      00000000 
 188      00000000 
 189              	#endif
 190              	#if CORTEX_NUM_VECTORS > 176
 191              	        .long       Vector300,  Vector304,  Vector308,  Vector30C
 192              	#endif
 193              	#if CORTEX_NUM_VECTORS > 180
 194              	        .long       Vector310,  Vector314,  Vector318,  Vector31C
 195              	#endif
 196              	#if CORTEX_NUM_VECTORS > 184
 197              	        .long       Vector320,  Vector324,  Vector328,  Vector32C
 198              	#endif
 199              	#if CORTEX_NUM_VECTORS > 188
 200              	        .long       Vector330,  Vector334,  Vector338,  Vector33C
 201              	#endif
 202              	#if CORTEX_NUM_VECTORS > 192
 203              	        .long       Vector340,  Vector344,  Vector348,  Vector34C
 204              	#endif
 205              	#if CORTEX_NUM_VECTORS > 196
 206              	        .long       Vector350,  Vector354,  Vector358,  Vector35C
 207              	#endif
 208              	#if CORTEX_NUM_VECTORS > 200
 209              	        .long       Vector360,  Vector364,  Vector368,  Vector36C
 210              	#endif
 211              	#if CORTEX_NUM_VECTORS > 204
 212              	        .long       Vector370,  Vector374,  Vector378,  Vector37C
 213              	#endif
 214              	#if CORTEX_NUM_VECTORS > 208
 215              	        .long       Vector380,  Vector384,  Vector388,  Vector38C
 216              	#endif
 217              	#if CORTEX_NUM_VECTORS > 212
 218              	        .long       Vector390,  Vector394,  Vector398,  Vector39C
 219              	#endif
 220              	#if CORTEX_NUM_VECTORS > 216
 221              	        .long       Vector3A0,  Vector3A4,  Vector3A8,  Vector3AC
 222              	#endif
 223              	#if CORTEX_NUM_VECTORS > 220
 224              	        .long       Vector3B0,  Vector3B4,  Vector3B8,  Vector3BC
 225              	#endif
 226              	#if CORTEX_NUM_VECTORS > 224
 227              	        .long       Vector3C0,  Vector3C4,  Vector3C8,  Vector3CC
 228              	#endif
 229              	#if CORTEX_NUM_VECTORS > 228
 230              	        .long       Vector3D0,  Vector3D4,  Vector3D8,  Vector3DC
 231              	#endif
 232              	#if CORTEX_NUM_VECTORS > 232
 233              	        .long       Vector3E0,  Vector3E4,  Vector3E8,  Vector3EC
 234              	#endif
 235              	#if CORTEX_NUM_VECTORS > 236
 236              	        .long       Vector3F0,  Vector3F4,  Vector3F8,  Vector3FC
 237              	#endif
 238              	
 239              	        .section .reset_handler, "ax"
 240              	
 241              	        .align      2
 242              	        _ASM_THUMB_FUNCTION_
 243              	        .global     Reset_Handler
 244              	Reset_Handler:
 245 0000 FEE7     	         b          _crt0_entry
 246              	
 247              	        _ASM_THUMB_FUNCTION_
 248              	        .weak       NMI_Handler
 249              	        .weak       HardFault_Handler
 250              	        .weak       MemManage_Handler
 251              	        .weak       BusFault_Handler
 252              	        .weak       UsageFault_Handler
 253              	        .weak       Vector1C
 254              	        .weak       Vector20
 255              	        .weak       Vector24
 256              	        .weak       Vector28
 257              	        .weak       SVC_Handler
 258              	        .weak       DebugMon_Handler
 259              	        .weak       Vector34
 260              	        .weak       PendSV_Handler
 261              	        .weak       SysTick_Handler
 262              	        .weak       Vector40,   Vector44,   Vector48,   Vector4C
 263              	#if CORTEX_NUM_VECTORS > 4
 264              	        .weak       Vector50,   Vector54,   Vector58,   Vector5C
 265              	#endif
 266              	#if CORTEX_NUM_VECTORS > 8
 267              	        .weak       Vector60,   Vector64,   Vector68,   Vector6C
 268              	#endif
 269              	#if CORTEX_NUM_VECTORS > 12
 270              	        .weak       Vector70,   Vector74,   Vector78,   Vector7C
 271              	#endif
 272              	#if CORTEX_NUM_VECTORS > 16
 273              	        .weak       Vector80,   Vector84,   Vector88,   Vector8C
 274              	#endif
 275              	#if CORTEX_NUM_VECTORS > 20
 276              	        .weak       Vector90,   Vector94,   Vector98,   Vector9C
 277              	#endif
 278              	#if CORTEX_NUM_VECTORS > 24
 279              	        .weak       VectorA0,   VectorA4,   VectorA8,   VectorAC
 280              	#endif
 281              	#if CORTEX_NUM_VECTORS > 28
 282              	        .weak       VectorB0,   VectorB4,   VectorB8,   VectorBC
 283              	#endif
 284              	#if CORTEX_NUM_VECTORS > 32
 285              	        .weak       VectorC0,   VectorC4,   VectorC8,   VectorCC
 286              	#endif
 287              	#if CORTEX_NUM_VECTORS > 36
 288              	        .weak       VectorD0,   VectorD4,   VectorD8,   VectorDC
 289              	#endif
 290              	#if CORTEX_NUM_VECTORS > 40
 291              	        .weak       VectorE0,   VectorE4,   VectorE8,   VectorEC
 292              	#endif
 293              	#if CORTEX_NUM_VECTORS > 44
 294              	        .weak       VectorF0,   VectorF4,   VectorF8,   VectorFC
 295              	#endif
 296              	#if CORTEX_NUM_VECTORS > 48
 297              	        .weak       Vector100,  Vector104,  Vector108,  Vector10C
 298              	#endif
 299              	#if CORTEX_NUM_VECTORS > 52
 300              	        .weak       Vector110,  Vector114,  Vector118,  Vector11C
 301              	#endif
 302              	#if CORTEX_NUM_VECTORS > 56
 303              	        .weak       Vector120,  Vector124,  Vector128,  Vector12C
 304              	#endif
 305              	#if CORTEX_NUM_VECTORS > 60
 306              	        .weak       Vector130,  Vector134,  Vector138,  Vector13C
 307              	#endif
 308              	#if CORTEX_NUM_VECTORS > 64
 309              	        .weak       Vector140,  Vector144,  Vector148,  Vector14C
 310              	#endif
 311              	#if CORTEX_NUM_VECTORS > 68
 312              	        .weak       Vector150,  Vector154,  Vector158,  Vector15C
 313              	#endif
 314              	#if CORTEX_NUM_VECTORS > 72
 315              	        .weak       Vector160,  Vector164,  Vector168,  Vector16C
 316              	#endif
 317              	#if CORTEX_NUM_VECTORS > 76
 318              	        .weak       Vector170,  Vector174,  Vector178,  Vector17C
 319              	#endif
 320              	#if CORTEX_NUM_VECTORS > 80
 321              	        .weak       Vector180,  Vector184,  Vector188,  Vector18C
 322              	#endif
 323              	#if CORTEX_NUM_VECTORS > 84
 324              	        .weak       Vector190,  Vector194,  Vector198,  Vector19C
 325              	#endif
 326              	#if CORTEX_NUM_VECTORS > 88
 327              	        .weak       Vector1A0,  Vector1A4,  Vector1A8,  Vector1AC
 328              	#endif
 329              	#if CORTEX_NUM_VECTORS > 92
 330              	        .weak       Vector1B0,  Vector1B4,  Vector1B8,  Vector1BC
 331              	#endif
 332              	#if CORTEX_NUM_VECTORS > 96
 333              	        .weak       Vector1C0,  Vector1C4,  Vector1C8,  Vector1CC
 334              	#endif
 335              	#if CORTEX_NUM_VECTORS > 100
 336              	        .weak       Vector1D0,  Vector1D4,  Vector1D8,  Vector1DC
 337              	#endif
 338              	#if CORTEX_NUM_VECTORS > 104
 339              	        .weak       Vector1E0,  Vector1E4,  Vector1E8,  Vector1EC
 340              	#endif
 341              	#if CORTEX_NUM_VECTORS > 108
 342              	        .weak       Vector1F0,  Vector1F4,  Vector1F8,  Vector1FC
 343              	#endif
 344              	#if CORTEX_NUM_VECTORS > 112
 345              	        .weak       Vector200,  Vector204,  Vector208,  Vector20C
 346              	#endif
 347              	#if CORTEX_NUM_VECTORS > 116
 348              	        .weak       Vector210,  Vector214,  Vector218,  Vector21C
 349              	#endif
 350              	#if CORTEX_NUM_VECTORS > 120
 351              	        .weak       Vector220,  Vector224,  Vector228,  Vector22C
 352              	#endif
 353              	#if CORTEX_NUM_VECTORS > 124
 354              	        .weak       Vector230,  Vector234,  Vector238,  Vector23C
 355              	#endif
 356              	#if CORTEX_NUM_VECTORS > 128
 357              	        .weak       Vector240,  Vector244,  Vector248,  Vector24C
 358              	#endif
 359              	#if CORTEX_NUM_VECTORS > 132
 360              	        .weak       Vector250,  Vector254,  Vector258,  Vector25C
 361              	#endif
 362              	#if CORTEX_NUM_VECTORS > 136
 363              	        .weak       Vector260,  Vector264,  Vector268,  Vector26C
 364              	#endif
 365              	#if CORTEX_NUM_VECTORS > 140
 366              	        .weak       Vector270,  Vector274,  Vector278,  Vector27C
 367              	#endif
 368              	#if CORTEX_NUM_VECTORS > 144
 369              	        .weak       Vector280,  Vector284,  Vector288,  Vector28C
 370              	#endif
 371              	#if CORTEX_NUM_VECTORS > 148
 372              	        .weak       Vector290,  Vector294,  Vector298,  Vector29C
 373              	#endif
 374              	#if CORTEX_NUM_VECTORS > 152
 375              	        .weak       Vector2A0,  Vector2A4,  Vector2A8,  Vector2AC
 376              	#endif
 377              	#if CORTEX_NUM_VECTORS > 156
 378              	        .weak       Vector2B0,  Vector2B4,  Vector2B8,  Vector2BC
 379              	#endif
 380              	#if CORTEX_NUM_VECTORS > 160
 381              	        .weak       Vector2C0,  Vector2C4,  Vector2C8,  Vector2CC
 382              	#endif
 383              	#if CORTEX_NUM_VECTORS > 164
 384              	        .weak       Vector2D0,  Vector2D4,  Vector2D8,  Vector2DC
 385              	#endif
 386              	#if CORTEX_NUM_VECTORS > 168
 387              	        .weak       Vector2E0,  Vector2E4,  Vector2E8,  Vector2EC
 388              	#endif
 389              	#if CORTEX_NUM_VECTORS > 172
 390              	        .weak       Vector2F0,  Vector2F4,  Vector2F8,  Vector2FC
 391              	#endif
 392              	#if CORTEX_NUM_VECTORS > 176
 393              	        .weak       Vector300,  Vector304,  Vector308,  Vector30C
 394              	#endif
 395              	#if CORTEX_NUM_VECTORS > 180
 396              	        .weak       Vector310,  Vector314,  Vector318,  Vector31C
 397              	#endif
 398              	#if CORTEX_NUM_VECTORS > 184
 399              	        .weak       Vector320,  Vector324,  Vector328,  Vector32C
 400              	#endif
 401              	#if CORTEX_NUM_VECTORS > 188
 402              	        .weak       Vector330,  Vector334,  Vector338,  Vector33C
 403              	#endif
 404              	#if CORTEX_NUM_VECTORS > 192
 405              	        .weak       Vector340,  Vector344,  Vector348,  Vector34C
 406              	#endif
 407              	#if CORTEX_NUM_VECTORS > 196
 408              	        .weak       Vector350,  Vector354,  Vector358,  Vector35C
 409              	#endif
 410              	#if CORTEX_NUM_VECTORS > 200
 411              	        .weak       Vector360,  Vector364,  Vector368,  Vector36C
 412              	#endif
 413              	#if CORTEX_NUM_VECTORS > 204
 414              	        .weak       Vector370,  Vector374,  Vector378,  Vector37C
 415              	#endif
 416              	#if CORTEX_NUM_VECTORS > 208
 417              	        .weak       Vector380,  Vector384,  Vector388,  Vector38C
 418              	#endif
 419              	#if CORTEX_NUM_VECTORS > 212
 420              	        .weak       Vector390,  Vector394,  Vector398,  Vector39C
 421              	#endif
 422              	#if CORTEX_NUM_VECTORS > 216
 423              	        .weak       Vector3A0,  Vector3A4,  Vector3A8,  Vector3AC
 424              	#endif
 425              	#if CORTEX_NUM_VECTORS > 220
 426              	        .weak       Vector3B0,  Vector3B4,  Vector3B8,  Vector3BC
 427              	#endif
 428              	#if CORTEX_NUM_VECTORS > 224
 429              	        .weak       Vector3C0,  Vector3C4,  Vector3C8,  Vector3CC
 430              	#endif
 431              	#if CORTEX_NUM_VECTORS > 228
 432              	        .weak       Vector3D0,  Vector3D4,  Vector3D8,  Vector3DC
 433              	#endif
 434              	#if CORTEX_NUM_VECTORS > 232
 435              	        .weak       Vector3E0,  Vector3E4,  Vector3E8,  Vector3EC
 436              	#endif
 437              	#if CORTEX_NUM_VECTORS > 236
 438              	        .weak       Vector3F0,  Vector3F4,  Vector3F8,  Vector3FC
 439              	#endif
 440              	
 441              	        _ASM_THUMB_FUNCTION_
 442              	NMI_Handler:
 443              	        _ASM_THUMB_FUNCTION_
 444              	HardFault_Handler:
 445              	        _ASM_THUMB_FUNCTION_
 446              	MemManage_Handler:
 447              	        _ASM_THUMB_FUNCTION_
 448              	BusFault_Handler:
 449              	        _ASM_THUMB_FUNCTION_
 450              	UsageFault_Handler:
 451              	        _ASM_THUMB_FUNCTION_
 452              	Vector1C:
 453              	        _ASM_THUMB_FUNCTION_
 454              	Vector20:
 455              	        _ASM_THUMB_FUNCTION_
 456              	Vector24:
 457              	        _ASM_THUMB_FUNCTION_
 458              	Vector28:
 459              	        _ASM_THUMB_FUNCTION_
 460              	SVC_Handler:
 461              	        _ASM_THUMB_FUNCTION_
 462              	DebugMon_Handler:
 463              	        _ASM_THUMB_FUNCTION_
 464              	Vector34:
 465              	        _ASM_THUMB_FUNCTION_
 466              	PendSV_Handler:
 467              	        _ASM_THUMB_FUNCTION_
 468              	SysTick_Handler:
 469              	        _ASM_THUMB_FUNCTION_
 470              	Vector40:
 471              	        _ASM_THUMB_FUNCTION_
 472              	Vector44:
 473              	        _ASM_THUMB_FUNCTION_
 474              	Vector48:
 475              	        _ASM_THUMB_FUNCTION_
 476              	Vector4C:
 477              	        _ASM_THUMB_FUNCTION_
 478              	Vector50:
 479              	        _ASM_THUMB_FUNCTION_
 480              	Vector54:
 481              	        _ASM_THUMB_FUNCTION_
 482              	Vector58:
 483              	        _ASM_THUMB_FUNCTION_
 484              	Vector5C:
 485              	#if CORTEX_NUM_VECTORS > 8
 486              	        _ASM_THUMB_FUNCTION_
 487              	Vector60:
 488              	        _ASM_THUMB_FUNCTION_
 489              	Vector64:
 490              	        _ASM_THUMB_FUNCTION_
 491              	Vector68:
 492              	        _ASM_THUMB_FUNCTION_
 493              	Vector6C:
 494              	        _ASM_THUMB_FUNCTION_
 495              	Vector70:
 496              	        _ASM_THUMB_FUNCTION_
 497              	Vector74:
 498              	        _ASM_THUMB_FUNCTION_
 499              	Vector78:
 500              	        _ASM_THUMB_FUNCTION_
 501              	Vector7C:
 502              	#endif
 503              	#if CORTEX_NUM_VECTORS > 16
 504              	        _ASM_THUMB_FUNCTION_
 505              	Vector80:
 506              	        _ASM_THUMB_FUNCTION_
 507              	Vector84:
 508              	        _ASM_THUMB_FUNCTION_
 509              	Vector88:
 510              	        _ASM_THUMB_FUNCTION_
 511              	Vector8C:
 512              	        _ASM_THUMB_FUNCTION_
 513              	Vector90:
 514              	        _ASM_THUMB_FUNCTION_
 515              	Vector94:
 516              	        _ASM_THUMB_FUNCTION_
 517              	Vector98:
 518              	        _ASM_THUMB_FUNCTION_
 519              	Vector9C:
 520              	#endif
 521              	#if CORTEX_NUM_VECTORS > 24
 522              	        _ASM_THUMB_FUNCTION_
 523              	VectorA0:
 524              	        _ASM_THUMB_FUNCTION_
 525              	VectorA4:
 526              	        _ASM_THUMB_FUNCTION_
 527              	VectorA8:
 528              	        _ASM_THUMB_FUNCTION_
 529              	VectorAC:
 530              	        _ASM_THUMB_FUNCTION_
 531              	VectorB0:
 532              	        _ASM_THUMB_FUNCTION_
 533              	VectorB4:
 534              	        _ASM_THUMB_FUNCTION_
 535              	VectorB8:
 536              	        _ASM_THUMB_FUNCTION_
 537              	VectorBC:
 538              	#endif
 539              	#if CORTEX_NUM_VECTORS > 32
 540              	        _ASM_THUMB_FUNCTION_
 541              	VectorC0:
 542              	        _ASM_THUMB_FUNCTION_
 543              	VectorC4:
 544              	        _ASM_THUMB_FUNCTION_
 545              	VectorC8:
 546              	        _ASM_THUMB_FUNCTION_
 547              	VectorCC:
 548              	        _ASM_THUMB_FUNCTION_
 549              	VectorD0:
 550              	        _ASM_THUMB_FUNCTION_
 551              	VectorD4:
 552              	        _ASM_THUMB_FUNCTION_
 553              	VectorD8:
 554              	        _ASM_THUMB_FUNCTION_
 555              	VectorDC:
 556              	#endif
 557              	#if CORTEX_NUM_VECTORS > 40
 558              	        _ASM_THUMB_FUNCTION_
 559              	VectorE0:
 560              	        _ASM_THUMB_FUNCTION_
 561              	VectorE4:
 562              	        _ASM_THUMB_FUNCTION_
 563              	VectorE8:
 564              	        _ASM_THUMB_FUNCTION_
 565              	VectorEC:
 566              	        _ASM_THUMB_FUNCTION_
 567              	VectorF0:
 568              	        _ASM_THUMB_FUNCTION_
 569              	VectorF4:
 570              	        _ASM_THUMB_FUNCTION_
 571              	VectorF8:
 572              	        _ASM_THUMB_FUNCTION_
 573              	VectorFC:
 574              	#endif
 575              	#if CORTEX_NUM_VECTORS > 48
 576              	        _ASM_THUMB_FUNCTION_
 577              	Vector100:
 578              	        _ASM_THUMB_FUNCTION_
 579              	Vector104:
 580              	        _ASM_THUMB_FUNCTION_
 581              	Vector108:
 582              	        _ASM_THUMB_FUNCTION_
 583              	Vector10C:
 584              	        _ASM_THUMB_FUNCTION_
 585              	Vector110:
 586              	        _ASM_THUMB_FUNCTION_
 587              	Vector114:
 588              	        _ASM_THUMB_FUNCTION_
 589              	Vector118:
 590              	        _ASM_THUMB_FUNCTION_
 591              	Vector11C:
 592              	#endif
 593              	#if CORTEX_NUM_VECTORS > 56
 594              	        _ASM_THUMB_FUNCTION_
 595              	Vector120:
 596              	        _ASM_THUMB_FUNCTION_
 597              	Vector124:
 598              	        _ASM_THUMB_FUNCTION_
 599              	Vector128:
 600              	        _ASM_THUMB_FUNCTION_
 601              	Vector12C:
 602              	        _ASM_THUMB_FUNCTION_
 603              	Vector130:
 604              	        _ASM_THUMB_FUNCTION_
 605              	Vector134:
 606              	        _ASM_THUMB_FUNCTION_
 607              	Vector138:
 608              	        _ASM_THUMB_FUNCTION_
 609              	Vector13C:
 610              	#endif
 611              	#if CORTEX_NUM_VECTORS > 64
 612              	        _ASM_THUMB_FUNCTION_
 613              	Vector140:
 614              	        _ASM_THUMB_FUNCTION_
 615              	Vector144:
 616              	        _ASM_THUMB_FUNCTION_
 617              	Vector148:
 618              	        _ASM_THUMB_FUNCTION_
 619              	Vector14C:
 620              	        _ASM_THUMB_FUNCTION_
 621              	Vector150:
 622              	        _ASM_THUMB_FUNCTION_
 623              	Vector154:
 624              	        _ASM_THUMB_FUNCTION_
 625              	Vector158:
 626              	        _ASM_THUMB_FUNCTION_
 627              	Vector15C:
 628              	#endif
 629              	#if CORTEX_NUM_VECTORS > 72
 630              	        _ASM_THUMB_FUNCTION_
 631              	Vector160:
 632              	        _ASM_THUMB_FUNCTION_
 633              	Vector164:
 634              	        _ASM_THUMB_FUNCTION_
 635              	Vector168:
 636              	        _ASM_THUMB_FUNCTION_
 637              	Vector16C:
 638              	        _ASM_THUMB_FUNCTION_
 639              	Vector170:
 640              	        _ASM_THUMB_FUNCTION_
 641              	Vector174:
 642              	        _ASM_THUMB_FUNCTION_
 643              	Vector178:
 644              	        _ASM_THUMB_FUNCTION_
 645              	Vector17C:
 646              	#endif
 647              	#if CORTEX_NUM_VECTORS > 80
 648              	        _ASM_THUMB_FUNCTION_
 649              	Vector180:
 650              	        _ASM_THUMB_FUNCTION_
 651              	Vector184:
 652              	        _ASM_THUMB_FUNCTION_
 653              	Vector188:
 654              	        _ASM_THUMB_FUNCTION_
 655              	Vector18C:
 656              	        _ASM_THUMB_FUNCTION_
 657              	Vector190:
 658              	        _ASM_THUMB_FUNCTION_
 659              	Vector194:
 660              	        _ASM_THUMB_FUNCTION_
 661              	Vector198:
 662              	        _ASM_THUMB_FUNCTION_
 663              	Vector19C:
 664              	#endif
 665              	#if CORTEX_NUM_VECTORS > 88
 666              	        _ASM_THUMB_FUNCTION_
 667              	Vector1A0:
 668              	        _ASM_THUMB_FUNCTION_
 669              	Vector1A4:
 670              	        _ASM_THUMB_FUNCTION_
 671              	Vector1A8:
 672              	        _ASM_THUMB_FUNCTION_
 673              	Vector1AC:
 674              	        _ASM_THUMB_FUNCTION_
 675              	Vector1B0:
 676              	        _ASM_THUMB_FUNCTION_
 677              	Vector1B4:
 678              	        _ASM_THUMB_FUNCTION_
 679              	Vector1B8:
 680              	        _ASM_THUMB_FUNCTION_
 681              	Vector1BC:
 682              	#endif
 683              	#if CORTEX_NUM_VECTORS > 96
 684              	        _ASM_THUMB_FUNCTION_
 685              	Vector1C0:
 686              	        _ASM_THUMB_FUNCTION_
 687              	Vector1C4:
 688              	        _ASM_THUMB_FUNCTION_
 689              	Vector1C8:
 690              	        _ASM_THUMB_FUNCTION_
 691              	Vector1CC:
 692              	        _ASM_THUMB_FUNCTION_
 693              	Vector1D0:
 694              	        _ASM_THUMB_FUNCTION_
 695              	Vector1D4:
 696              	        _ASM_THUMB_FUNCTION_
 697              	Vector1D8:
 698              	        _ASM_THUMB_FUNCTION_
 699              	Vector1DC:
 700              	#endif
 701              	#if CORTEX_NUM_VECTORS > 104
 702              	        _ASM_THUMB_FUNCTION_
 703              	Vector1E0:
 704              	        _ASM_THUMB_FUNCTION_
 705              	Vector1E4:
 706              	        _ASM_THUMB_FUNCTION_
 707              	Vector1E8:
 708              	        _ASM_THUMB_FUNCTION_
 709              	Vector1EC:
 710              	        _ASM_THUMB_FUNCTION_
 711              	Vector1F0:
 712              	        _ASM_THUMB_FUNCTION_
 713              	Vector1F4:
 714              	        _ASM_THUMB_FUNCTION_
 715              	Vector1F8:
 716              	        _ASM_THUMB_FUNCTION_
 717              	Vector1FC:
 718              	#endif
 719              	#if CORTEX_NUM_VECTORS > 112
 720              	        _ASM_THUMB_FUNCTION_
 721              	Vector200:
 722              	        _ASM_THUMB_FUNCTION_
 723              	Vector204:
 724              	        _ASM_THUMB_FUNCTION_
 725              	Vector208:
 726              	        _ASM_THUMB_FUNCTION_
 727              	Vector20C:
 728              	        _ASM_THUMB_FUNCTION_
 729              	Vector210:
 730              	        _ASM_THUMB_FUNCTION_
 731              	Vector214:
 732              	        _ASM_THUMB_FUNCTION_
 733              	Vector218:
 734              	        _ASM_THUMB_FUNCTION_
 735              	Vector21C:
 736              	#endif
 737              	#if CORTEX_NUM_VECTORS > 120
 738              	        _ASM_THUMB_FUNCTION_
 739              	Vector220:
 740              	        _ASM_THUMB_FUNCTION_
 741              	Vector224:
 742              	        _ASM_THUMB_FUNCTION_
 743              	Vector228:
 744              	        _ASM_THUMB_FUNCTION_
 745              	Vector22C:
 746              	        _ASM_THUMB_FUNCTION_
 747              	Vector230:
 748              	        _ASM_THUMB_FUNCTION_
 749              	Vector234:
 750              	        _ASM_THUMB_FUNCTION_
 751              	Vector238:
 752              	        _ASM_THUMB_FUNCTION_
 753              	Vector23C:
 754              	#endif
 755              	#if CORTEX_NUM_VECTORS > 128
 756              	        _ASM_THUMB_FUNCTION_
 757              	Vector240:
 758              	        _ASM_THUMB_FUNCTION_
 759              	Vector244:
 760              	        _ASM_THUMB_FUNCTION_
 761              	Vector248:
 762              	        _ASM_THUMB_FUNCTION_
 763              	Vector24C:
 764              	        _ASM_THUMB_FUNCTION_
 765              	Vector250:
 766              	        _ASM_THUMB_FUNCTION_
 767              	Vector254:
 768              	        _ASM_THUMB_FUNCTION_
 769              	Vector258:
 770              	        _ASM_THUMB_FUNCTION_
 771              	Vector25C:
 772              	#endif
 773              	#if CORTEX_NUM_VECTORS > 136
 774              	        _ASM_THUMB_FUNCTION_
 775              	Vector260:
 776              	        _ASM_THUMB_FUNCTION_
 777              	Vector264:
 778              	        _ASM_THUMB_FUNCTION_
 779              	Vector268:
 780              	        _ASM_THUMB_FUNCTION_
 781              	Vector26C:
 782              	        _ASM_THUMB_FUNCTION_
 783              	Vector270:
 784              	        _ASM_THUMB_FUNCTION_
 785              	Vector274:
 786              	        _ASM_THUMB_FUNCTION_
 787              	Vector278:
 788              	        _ASM_THUMB_FUNCTION_
 789              	Vector27C:
 790              	#endif
 791              	#if CORTEX_NUM_VECTORS > 144
 792              	        _ASM_THUMB_FUNCTION_
 793              	Vector280:
 794              	        _ASM_THUMB_FUNCTION_
 795              	Vector284:
 796              	        _ASM_THUMB_FUNCTION_
 797              	Vector288:
 798              	        _ASM_THUMB_FUNCTION_
 799              	Vector28C:
 800              	        _ASM_THUMB_FUNCTION_
 801              	Vector290:
 802              	        _ASM_THUMB_FUNCTION_
 803              	Vector294:
 804              	        _ASM_THUMB_FUNCTION_
 805              	Vector298:
 806              	        _ASM_THUMB_FUNCTION_
 807              	Vector29C:
 808              	#endif
 809              	#if CORTEX_NUM_VECTORS > 152
 810              	        _ASM_THUMB_FUNCTION_
 811              	Vector2A0:
 812              	        _ASM_THUMB_FUNCTION_
 813              	Vector2A4:
 814              	        _ASM_THUMB_FUNCTION_
 815              	Vector2A8:
 816              	        _ASM_THUMB_FUNCTION_
 817              	Vector2AC:
 818              	        _ASM_THUMB_FUNCTION_
 819              	Vector2B0:
 820              	        _ASM_THUMB_FUNCTION_
 821              	Vector2B4:
 822              	        _ASM_THUMB_FUNCTION_
 823              	Vector2B8:
 824              	        _ASM_THUMB_FUNCTION_
 825              	Vector2BC:
 826              	#endif
 827              	#if CORTEX_NUM_VECTORS > 160
 828              	        _ASM_THUMB_FUNCTION_
 829              	Vector2C0:
 830              	        _ASM_THUMB_FUNCTION_
 831              	Vector2C4:
 832              	        _ASM_THUMB_FUNCTION_
 833              	Vector2C8:
 834              	        _ASM_THUMB_FUNCTION_
 835              	Vector2CC:
 836              	        _ASM_THUMB_FUNCTION_
 837              	Vector2D0:
 838              	        _ASM_THUMB_FUNCTION_
 839              	Vector2D4:
 840              	        _ASM_THUMB_FUNCTION_
 841              	Vector2D8:
 842              	        _ASM_THUMB_FUNCTION_
 843              	Vector2DC:
 844              	#endif
 845              	#if CORTEX_NUM_VECTORS > 168
 846              	        _ASM_THUMB_FUNCTION_
 847              	Vector2E0:
 848              	        _ASM_THUMB_FUNCTION_
 849              	Vector2E4:
 850              	        _ASM_THUMB_FUNCTION_
 851              	Vector2E8:
 852              	        _ASM_THUMB_FUNCTION_
 853              	Vector2EC:
 854              	        _ASM_THUMB_FUNCTION_
 855              	Vector2F0:
 856              	        _ASM_THUMB_FUNCTION_
 857              	Vector2F4:
 858              	        _ASM_THUMB_FUNCTION_
 859              	Vector2F8:
 860              	        _ASM_THUMB_FUNCTION_
 861              	Vector2FC:
 862              	#endif
 863              	#if CORTEX_NUM_VECTORS > 176
 864              	        _ASM_THUMB_FUNCTION_
 865              	Vector300:
 866              	        _ASM_THUMB_FUNCTION_
 867              	Vector304:
 868              	        _ASM_THUMB_FUNCTION_
 869              	Vector308:
 870              	        _ASM_THUMB_FUNCTION_
 871              	Vector30C:
 872              	        _ASM_THUMB_FUNCTION_
 873              	Vector310:
 874              	        _ASM_THUMB_FUNCTION_
 875              	Vector314:
 876              	        _ASM_THUMB_FUNCTION_
 877              	Vector318:
 878              	        _ASM_THUMB_FUNCTION_
 879              	Vector31C:
 880              	#endif
 881              	#if CORTEX_NUM_VECTORS > 184
 882              	        _ASM_THUMB_FUNCTION_
 883              	Vector320:
 884              	        _ASM_THUMB_FUNCTION_
 885              	Vector324:
 886              	        _ASM_THUMB_FUNCTION_
 887              	Vector328:
 888              	        _ASM_THUMB_FUNCTION_
 889              	Vector32C:
 890              	        _ASM_THUMB_FUNCTION_
 891              	Vector330:
 892              	        _ASM_THUMB_FUNCTION_
 893              	Vector334:
 894              	        _ASM_THUMB_FUNCTION_
 895              	Vector338:
 896              	        _ASM_THUMB_FUNCTION_
 897              	Vector33C:
 898              	#endif
 899              	#if CORTEX_NUM_VECTORS > 192
 900              	        _ASM_THUMB_FUNCTION_
 901              	Vector340:
 902              	        _ASM_THUMB_FUNCTION_
 903              	Vector344:
 904              	        _ASM_THUMB_FUNCTION_
 905              	Vector348:
 906              	        _ASM_THUMB_FUNCTION_
 907              	Vector34C:
 908              	        _ASM_THUMB_FUNCTION_
 909              	Vector350:
 910              	        _ASM_THUMB_FUNCTION_
 911              	Vector354:
 912              	        _ASM_THUMB_FUNCTION_
 913              	Vector358:
 914              	        _ASM_THUMB_FUNCTION_
 915              	Vector35C:
 916              	#endif
 917              	#if CORTEX_NUM_VECTORS > 200
 918              	        _ASM_THUMB_FUNCTION_
 919              	Vector360:
 920              	        _ASM_THUMB_FUNCTION_
 921              	Vector364:
 922              	        _ASM_THUMB_FUNCTION_
 923              	Vector368:
 924              	        _ASM_THUMB_FUNCTION_
 925              	Vector36C:
 926              	        _ASM_THUMB_FUNCTION_
 927              	Vector370:
 928              	        _ASM_THUMB_FUNCTION_
 929              	Vector374:
 930              	        _ASM_THUMB_FUNCTION_
 931              	Vector378:
 932              	        _ASM_THUMB_FUNCTION_
 933              	Vector37C:
 934              	#endif
 935              	#if CORTEX_NUM_VECTORS > 208
 936              	        _ASM_THUMB_FUNCTION_
 937              	Vector380:
 938              	        _ASM_THUMB_FUNCTION_
 939              	Vector384:
 940              	        _ASM_THUMB_FUNCTION_
 941              	Vector388:
 942              	        _ASM_THUMB_FUNCTION_
 943              	Vector38C:
 944              	        _ASM_THUMB_FUNCTION_
 945              	Vector390:
 946              	        _ASM_THUMB_FUNCTION_
 947              	Vector394:
 948              	        _ASM_THUMB_FUNCTION_
 949              	Vector398:
 950              	        _ASM_THUMB_FUNCTION_
 951              	Vector39C:
 952              	#endif
 953              	#if CORTEX_NUM_VECTORS > 216
 954              	        _ASM_THUMB_FUNCTION_
 955              	Vector3A0:
 956              	        _ASM_THUMB_FUNCTION_
 957              	Vector3A4:
 958              	        _ASM_THUMB_FUNCTION_
 959              	Vector3A8:
 960              	        _ASM_THUMB_FUNCTION_
 961              	Vector3AC:
 962              	        _ASM_THUMB_FUNCTION_
 963              	Vector3B0:
 964              	        _ASM_THUMB_FUNCTION_
 965              	Vector3B4:
 966              	        _ASM_THUMB_FUNCTION_
 967              	Vector3B8:
 968              	        _ASM_THUMB_FUNCTION_
 969              	Vector3BC:
 970              	#endif
 971              	#if CORTEX_NUM_VECTORS > 224
 972              	        _ASM_THUMB_FUNCTION_
 973              	Vector3C0:
 974              	        _ASM_THUMB_FUNCTION_
 975              	Vector3C4:
 976              	        _ASM_THUMB_FUNCTION_
 977              	Vector3C8:
 978              	        _ASM_THUMB_FUNCTION_
 979              	Vector3CC:
 980              	        _ASM_THUMB_FUNCTION_
 981              	Vector3D0:
 982              	        _ASM_THUMB_FUNCTION_
 983              	Vector3D4:
 984              	        _ASM_THUMB_FUNCTION_
 985              	Vector3D8:
 986              	        _ASM_THUMB_FUNCTION_
 987              	Vector3DC:
 988              	#endif
 989              	#if CORTEX_NUM_VECTORS > 232
 990              	        _ASM_THUMB_FUNCTION_
 991              	Vector3E0:
 992              	        _ASM_THUMB_FUNCTION_
 993              	Vector3E4:
 994              	        _ASM_THUMB_FUNCTION_
 995              	Vector3E8:
 996              	        _ASM_THUMB_FUNCTION_
 997              	Vector3EC:
 998              	        _ASM_THUMB_FUNCTION_
 999              	Vector3F0:
 1000              	        _ASM_THUMB_FUNCTION_
 1001              	Vector3F4:
 1002              	        _ASM_THUMB_FUNCTION_
 1003              	Vector3F8:
 1004              	        _ASM_THUMB_FUNCTION_
 1005              	Vector3FC:
 1006              	#endif
 1007 0002 FFF7FEFF 	        bl          _unhandled_exception
 1008              	
 1009              	        _ASM_THUMB_FUNCTION_
 1010              	        .weak       _unhandled_exception
 1011              	_unhandled_exception:
 1012              	.stay:
 1013 0006 FEE7     	        b           .stay
DEFINED SYMBOLS
Modules/Boot/src/GCC/vectors.S:43     .vectors:00000000 _vectors
Modules/Boot/src/GCC/vectors.S:244    .reset_handler:00000000 Reset_Handler
Modules/Boot/src/GCC/vectors.S:442    .reset_handler:00000002 NMI_Handler
Modules/Boot/src/GCC/vectors.S:444    .reset_handler:00000002 HardFault_Handler
Modules/Boot/src/GCC/vectors.S:446    .reset_handler:00000002 MemManage_Handler
Modules/Boot/src/GCC/vectors.S:448    .reset_handler:00000002 BusFault_Handler
Modules/Boot/src/GCC/vectors.S:450    .reset_handler:00000002 UsageFault_Handler
Modules/Boot/src/GCC/vectors.S:452    .reset_handler:00000002 Vector1C
Modules/Boot/src/GCC/vectors.S:454    .reset_handler:00000002 Vector20
Modules/Boot/src/GCC/vectors.S:456    .reset_handler:00000002 Vector24
Modules/Boot/src/GCC/vectors.S:458    .reset_handler:00000002 Vector28
Modules/Boot/src/GCC/vectors.S:460    .reset_handler:00000002 SVC_Handler
Modules/Boot/src/GCC/vectors.S:462    .reset_handler:00000002 DebugMon_Handler
Modules/Boot/src/GCC/vectors.S:464    .reset_handler:00000002 Vector34
Modules/Boot/src/GCC/vectors.S:466    .reset_handler:00000002 PendSV_Handler
Modules/Boot/src/GCC/vectors.S:468    .reset_handler:00000002 SysTick_Handler
Modules/Boot/src/GCC/vectors.S:470    .reset_handler:00000002 Vector40
Modules/Boot/src/GCC/vectors.S:472    .reset_handler:00000002 Vector44
Modules/Boot/src/GCC/vectors.S:474    .reset_handler:00000002 Vector48
Modules/Boot/src/GCC/vectors.S:476    .reset_handler:00000002 Vector4C
Modules/Boot/src/GCC/vectors.S:478    .reset_handler:00000002 Vector50
Modules/Boot/src/GCC/vectors.S:480    .reset_handler:00000002 Vector54
Modules/Boot/src/GCC/vectors.S:482    .reset_handler:00000002 Vector58
Modules/Boot/src/GCC/vectors.S:484    .reset_handler:00000002 Vector5C
Modules/Boot/src/GCC/vectors.S:487    .reset_handler:00000002 Vector60
Modules/Boot/src/GCC/vectors.S:489    .reset_handler:00000002 Vector64
Modules/Boot/src/GCC/vectors.S:491    .reset_handler:00000002 Vector68
Modules/Boot/src/GCC/vectors.S:493    .reset_handler:00000002 Vector6C
Modules/Boot/src/GCC/vectors.S:495    .reset_handler:00000002 Vector70
Modules/Boot/src/GCC/vectors.S:497    .reset_handler:00000002 Vector74
Modules/Boot/src/GCC/vectors.S:499    .reset_handler:00000002 Vector78
Modules/Boot/src/GCC/vectors.S:501    .reset_handler:00000002 Vector7C
Modules/Boot/src/GCC/vectors.S:505    .reset_handler:00000002 Vector80
Modules/Boot/src/GCC/vectors.S:507    .reset_handler:00000002 Vector84
Modules/Boot/src/GCC/vectors.S:509    .reset_handler:00000002 Vector88
Modules/Boot/src/GCC/vectors.S:511    .reset_handler:00000002 Vector8C
Modules/Boot/src/GCC/vectors.S:513    .reset_handler:00000002 Vector90
Modules/Boot/src/GCC/vectors.S:515    .reset_handler:00000002 Vector94
Modules/Boot/src/GCC/vectors.S:517    .reset_handler:00000002 Vector98
Modules/Boot/src/GCC/vectors.S:519    .reset_handler:00000002 Vector9C
Modules/Boot/src/GCC/vectors.S:523    .reset_handler:00000002 VectorA0
Modules/Boot/src/GCC/vectors.S:525    .reset_handler:00000002 VectorA4
Modules/Boot/src/GCC/vectors.S:527    .reset_handler:00000002 VectorA8
Modules/Boot/src/GCC/vectors.S:529    .reset_handler:00000002 VectorAC
Modules/Boot/src/GCC/vectors.S:531    .reset_handler:00000002 VectorB0
Modules/Boot/src/GCC/vectors.S:533    .reset_handler:00000002 VectorB4
Modules/Boot/src/GCC/vectors.S:535    .reset_handler:00000002 VectorB8
Modules/Boot/src/GCC/vectors.S:537    .reset_handler:00000002 VectorBC
Modules/Boot/src/GCC/vectors.S:541    .reset_handler:00000002 VectorC0
Modules/Boot/src/GCC/vectors.S:543    .reset_handler:00000002 VectorC4
Modules/Boot/src/GCC/vectors.S:545    .reset_handler:00000002 VectorC8
Modules/Boot/src/GCC/vectors.S:547    .reset_handler:00000002 VectorCC
Modules/Boot/src/GCC/vectors.S:549    .reset_handler:00000002 VectorD0
Modules/Boot/src/GCC/vectors.S:551    .reset_handler:00000002 VectorD4
Modules/Boot/src/GCC/vectors.S:553    .reset_handler:00000002 VectorD8
Modules/Boot/src/GCC/vectors.S:555    .reset_handler:00000002 VectorDC
Modules/Boot/src/GCC/vectors.S:559    .reset_handler:00000002 VectorE0
Modules/Boot/src/GCC/vectors.S:561    .reset_handler:00000002 VectorE4
Modules/Boot/src/GCC/vectors.S:563    .reset_handler:00000002 VectorE8
Modules/Boot/src/GCC/vectors.S:565    .reset_handler:00000002 VectorEC
Modules/Boot/src/GCC/vectors.S:567    .reset_handler:00000002 VectorF0
Modules/Boot/src/GCC/vectors.S:569    .reset_handler:00000002 VectorF4
Modules/Boot/src/GCC/vectors.S:571    .reset_handler:00000002 VectorF8
Modules/Boot/src/GCC/vectors.S:573    .reset_handler:00000002 VectorFC
Modules/Boot/src/GCC/vectors.S:577    .reset_handler:00000002 Vector100
Modules/Boot/src/GCC/vectors.S:579    .reset_handler:00000002 Vector104
Modules/Boot/src/GCC/vectors.S:581    .reset_handler:00000002 Vector108
Modules/Boot/src/GCC/vectors.S:583    .reset_handler:00000002 Vector10C
Modules/Boot/src/GCC/vectors.S:585    .reset_handler:00000002 Vector110
Modules/Boot/src/GCC/vectors.S:587    .reset_handler:00000002 Vector114
Modules/Boot/src/GCC/vectors.S:589    .reset_handler:00000002 Vector118
Modules/Boot/src/GCC/vectors.S:591    .reset_handler:00000002 Vector11C
Modules/Boot/src/GCC/vectors.S:595    .reset_handler:00000002 Vector120
Modules/Boot/src/GCC/vectors.S:597    .reset_handler:00000002 Vector124
Modules/Boot/src/GCC/vectors.S:599    .reset_handler:00000002 Vector128
Modules/Boot/src/GCC/vectors.S:601    .reset_handler:00000002 Vector12C
Modules/Boot/src/GCC/vectors.S:603    .reset_handler:00000002 Vector130
Modules/Boot/src/GCC/vectors.S:605    .reset_handler:00000002 Vector134
Modules/Boot/src/GCC/vectors.S:607    .reset_handler:00000002 Vector138
Modules/Boot/src/GCC/vectors.S:609    .reset_handler:00000002 Vector13C
Modules/Boot/src/GCC/vectors.S:613    .reset_handler:00000002 Vector140
Modules/Boot/src/GCC/vectors.S:615    .reset_handler:00000002 Vector144
Modules/Boot/src/GCC/vectors.S:617    .reset_handler:00000002 Vector148
Modules/Boot/src/GCC/vectors.S:619    .reset_handler:00000002 Vector14C
Modules/Boot/src/GCC/vectors.S:621    .reset_handler:00000002 Vector150
Modules/Boot/src/GCC/vectors.S:623    .reset_handler:00000002 Vector154
Modules/Boot/src/GCC/vectors.S:625    .reset_handler:00000002 Vector158
Modules/Boot/src/GCC/vectors.S:627    .reset_handler:00000002 Vector15C
Modules/Boot/src/GCC/vectors.S:631    .reset_handler:00000002 Vector160
Modules/Boot/src/GCC/vectors.S:633    .reset_handler:00000002 Vector164
Modules/Boot/src/GCC/vectors.S:635    .reset_handler:00000002 Vector168
Modules/Boot/src/GCC/vectors.S:637    .reset_handler:00000002 Vector16C
Modules/Boot/src/GCC/vectors.S:639    .reset_handler:00000002 Vector170
Modules/Boot/src/GCC/vectors.S:641    .reset_handler:00000002 Vector174
Modules/Boot/src/GCC/vectors.S:643    .reset_handler:00000002 Vector178
Modules/Boot/src/GCC/vectors.S:645    .reset_handler:00000002 Vector17C
Modules/Boot/src/GCC/vectors.S:649    .reset_handler:00000002 Vector180
Modules/Boot/src/GCC/vectors.S:651    .reset_handler:00000002 Vector184
Modules/Boot/src/GCC/vectors.S:653    .reset_handler:00000002 Vector188
Modules/Boot/src/GCC/vectors.S:655    .reset_handler:00000002 Vector18C
Modules/Boot/src/GCC/vectors.S:657    .reset_handler:00000002 Vector190
Modules/Boot/src/GCC/vectors.S:659    .reset_handler:00000002 Vector194
Modules/Boot/src/GCC/vectors.S:661    .reset_handler:00000002 Vector198
Modules/Boot/src/GCC/vectors.S:663    .reset_handler:00000002 Vector19C
Modules/Boot/src/GCC/vectors.S:667    .reset_handler:00000002 Vector1A0
Modules/Boot/src/GCC/vectors.S:669    .reset_handler:00000002 Vector1A4
Modules/Boot/src/GCC/vectors.S:671    .reset_handler:00000002 Vector1A8
Modules/Boot/src/GCC/vectors.S:673    .reset_handler:00000002 Vector1AC
Modules/Boot/src/GCC/vectors.S:675    .reset_handler:00000002 Vector1B0
Modules/Boot/src/GCC/vectors.S:677    .reset_handler:00000002 Vector1B4
Modules/Boot/src/GCC/vectors.S:679    .reset_handler:00000002 Vector1B8
Modules/Boot/src/GCC/vectors.S:681    .reset_handler:00000002 Vector1BC
Modules/Boot/src/GCC/vectors.S:685    .reset_handler:00000002 Vector1C0
Modules/Boot/src/GCC/vectors.S:687    .reset_handler:00000002 Vector1C4
Modules/Boot/src/GCC/vectors.S:689    .reset_handler:00000002 Vector1C8
Modules/Boot/src/GCC/vectors.S:691    .reset_handler:00000002 Vector1CC
Modules/Boot/src/GCC/vectors.S:693    .reset_handler:00000002 Vector1D0
Modules/Boot/src/GCC/vectors.S:695    .reset_handler:00000002 Vector1D4
Modules/Boot/src/GCC/vectors.S:697    .reset_handler:00000002 Vector1D8
Modules/Boot/src/GCC/vectors.S:699    .reset_handler:00000002 Vector1DC
Modules/Boot/src/GCC/vectors.S:703    .reset_handler:00000002 Vector1E0
Modules/Boot/src/GCC/vectors.S:705    .reset_handler:00000002 Vector1E4
Modules/Boot/src/GCC/vectors.S:707    .reset_handler:00000002 Vector1E8
Modules/Boot/src/GCC/vectors.S:709    .reset_handler:00000002 Vector1EC
Modules/Boot/src/GCC/vectors.S:711    .reset_handler:00000002 Vector1F0
Modules/Boot/src/GCC/vectors.S:713    .reset_handler:00000002 Vector1F4
Modules/Boot/src/GCC/vectors.S:715    .reset_handler:00000002 Vector1F8
Modules/Boot/src/GCC/vectors.S:717    .reset_handler:00000002 Vector1FC
Modules/Boot/src/GCC/vectors.S:721    .reset_handler:00000002 Vector200
Modules/Boot/src/GCC/vectors.S:723    .reset_handler:00000002 Vector204
Modules/Boot/src/GCC/vectors.S:725    .reset_handler:00000002 Vector208
Modules/Boot/src/GCC/vectors.S:727    .reset_handler:00000002 Vector20C
Modules/Boot/src/GCC/vectors.S:729    .reset_handler:00000002 Vector210
Modules/Boot/src/GCC/vectors.S:731    .reset_handler:00000002 Vector214
Modules/Boot/src/GCC/vectors.S:733    .reset_handler:00000002 Vector218
Modules/Boot/src/GCC/vectors.S:735    .reset_handler:00000002 Vector21C
Modules/Boot/src/GCC/vectors.S:739    .reset_handler:00000002 Vector220
Modules/Boot/src/GCC/vectors.S:741    .reset_handler:00000002 Vector224
Modules/Boot/src/GCC/vectors.S:743    .reset_handler:00000002 Vector228
Modules/Boot/src/GCC/vectors.S:745    .reset_handler:00000002 Vector22C
Modules/Boot/src/GCC/vectors.S:747    .reset_handler:00000002 Vector230
Modules/Boot/src/GCC/vectors.S:749    .reset_handler:00000002 Vector234
Modules/Boot/src/GCC/vectors.S:751    .reset_handler:00000002 Vector238
Modules/Boot/src/GCC/vectors.S:753    .reset_handler:00000002 Vector23C
Modules/Boot/src/GCC/vectors.S:757    .reset_handler:00000002 Vector240
Modules/Boot/src/GCC/vectors.S:759    .reset_handler:00000002 Vector244
Modules/Boot/src/GCC/vectors.S:761    .reset_handler:00000002 Vector248
Modules/Boot/src/GCC/vectors.S:763    .reset_handler:00000002 Vector24C
Modules/Boot/src/GCC/vectors.S:765    .reset_handler:00000002 Vector250
Modules/Boot/src/GCC/vectors.S:767    .reset_handler:00000002 Vector254
Modules/Boot/src/GCC/vectors.S:769    .reset_handler:00000002 Vector258
Modules/Boot/src/GCC/vectors.S:771    .reset_handler:00000002 Vector25C
Modules/Boot/src/GCC/vectors.S:775    .reset_handler:00000002 Vector260
Modules/Boot/src/GCC/vectors.S:777    .reset_handler:00000002 Vector264
Modules/Boot/src/GCC/vectors.S:779    .reset_handler:00000002 Vector268
Modules/Boot/src/GCC/vectors.S:781    .reset_handler:00000002 Vector26C
Modules/Boot/src/GCC/vectors.S:783    .reset_handler:00000002 Vector270
Modules/Boot/src/GCC/vectors.S:785    .reset_handler:00000002 Vector274
Modules/Boot/src/GCC/vectors.S:787    .reset_handler:00000002 Vector278
Modules/Boot/src/GCC/vectors.S:789    .reset_handler:00000002 Vector27C
Modules/Boot/src/GCC/vectors.S:793    .reset_handler:00000002 Vector280
Modules/Boot/src/GCC/vectors.S:795    .reset_handler:00000002 Vector284
Modules/Boot/src/GCC/vectors.S:797    .reset_handler:00000002 Vector288
Modules/Boot/src/GCC/vectors.S:799    .reset_handler:00000002 Vector28C
Modules/Boot/src/GCC/vectors.S:801    .reset_handler:00000002 Vector290
Modules/Boot/src/GCC/vectors.S:803    .reset_handler:00000002 Vector294
Modules/Boot/src/GCC/vectors.S:805    .reset_handler:00000002 Vector298
Modules/Boot/src/GCC/vectors.S:807    .reset_handler:00000002 Vector29C
Modules/Boot/src/GCC/vectors.S:811    .reset_handler:00000002 Vector2A0
Modules/Boot/src/GCC/vectors.S:813    .reset_handler:00000002 Vector2A4
Modules/Boot/src/GCC/vectors.S:815    .reset_handler:00000002 Vector2A8
Modules/Boot/src/GCC/vectors.S:817    .reset_handler:00000002 Vector2AC
Modules/Boot/src/GCC/vectors.S:819    .reset_handler:00000002 Vector2B0
Modules/Boot/src/GCC/vectors.S:821    .reset_handler:00000002 Vector2B4
Modules/Boot/src/GCC/vectors.S:823    .reset_handler:00000002 Vector2B8
Modules/Boot/src/GCC/vectors.S:825    .reset_handler:00000002 Vector2BC
Modules/Boot/src/GCC/vectors.S:829    .reset_handler:00000002 Vector2C0
Modules/Boot/src/GCC/vectors.S:831    .reset_handler:00000002 Vector2C4
Modules/Boot/src/GCC/vectors.S:833    .reset_handler:00000002 Vector2C8
Modules/Boot/src/GCC/vectors.S:835    .reset_handler:00000002 Vector2CC
Modules/Boot/src/GCC/vectors.S:837    .reset_handler:00000002 Vector2D0
Modules/Boot/src/GCC/vectors.S:839    .reset_handler:00000002 Vector2D4
Modules/Boot/src/GCC/vectors.S:841    .reset_handler:00000002 Vector2D8
Modules/Boot/src/GCC/vectors.S:843    .reset_handler:00000002 Vector2DC
Modules/Boot/src/GCC/vectors.S:847    .reset_handler:00000002 Vector2E0
Modules/Boot/src/GCC/vectors.S:849    .reset_handler:00000002 Vector2E4
Modules/Boot/src/GCC/vectors.S:851    .reset_handler:00000002 Vector2E8
Modules/Boot/src/GCC/vectors.S:853    .reset_handler:00000002 Vector2EC
Modules/Boot/src/GCC/vectors.S:855    .reset_handler:00000002 Vector2F0
Modules/Boot/src/GCC/vectors.S:857    .reset_handler:00000002 Vector2F4
Modules/Boot/src/GCC/vectors.S:859    .reset_handler:00000002 Vector2F8
Modules/Boot/src/GCC/vectors.S:861    .reset_handler:00000002 Vector2FC
Modules/Boot/src/GCC/vectors.S:241    .reset_handler:00000000 $t
Modules/Boot/src/GCC/vectors.S:1011   .reset_handler:00000006 _unhandled_exception
Modules/Boot/src/GCC/vectors.S:1012   .reset_handler:00000006 .stay
                         .vectors:00000000 $d

UNDEFINED SYMBOLS
__main_stack_end__
_crt0_entry

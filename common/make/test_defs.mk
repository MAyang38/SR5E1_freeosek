################################################################################
# Test specific common defines.
################################################################################

# Set PATH_SEPARATOR to ":" (Linux style) because it is working also in Windows system
PATH_SEPARATOR := :

# Project root directory
PROJECT_ROOT_DIR := $(CURDIR)

# Project root directory
DRIVE_LETTER := $(word 1, $(subst :, ,$(PROJECT_ROOT_DIR)))
PROJECT_DRIVE_WND := $(DRIVE_LETTER):
PROJECT_DRIVE_CYG := /$(shell echo $(DRIVE_LETTER) | tr A-Z a-z)

# 'Stellar SDK' root directory
ifndef STELLAR_E_SDK_RELATIVE_PATH
STELLAR_E_SDK_RELATIVE_PATH := $(PROJECT_ROOT_DIR)./
endif
STELLAR_E_SDK_ABSOLUTE_PATH := $(shell cd $(STELLAR_E_SDK_RELATIVE_PATH) && pwd)

STELLAR_E_SDK_ROOT_DIR      := $(subst $(PROJECT_DRIVE_CYG),$(PROJECT_DRIVE_WND),$(subst \,/,$(STELLAR_E_SDK_ABSOLUTE_PATH)))
STELLAR_E_SDK_PREFIX_PATH   := $(subst $(PROJECT_DRIVE_WND),$(PROJECT_DRIVE_CYG),$(subst \,/,$(STELLAR_E_SDK_ABSOLUTE_PATH)))

# 'Stellar SDK' build system directory
STELLAR_E_SDK_BUILD_SYSTEM_DIR := $(STELLAR_E_SDK_ROOT_DIR)/Modules/Common/BuildSystem/mk

################################################################################
# Define device
################################################################################

CONFIG_DEVICE := sr5e1

################################################################################
# Define board
################################################################################

CONFIG_BOARD := evbe7000p

################################################################################
# Target build configuration
################################################################################

# Default (do not override directly, use CONFIG_TARGET_CORE)
TARGET_CORE := M7

# The target core for this build
CONFIG_TARGET_CORE := core1

# TARGET_CORE_DIR is only used to define the build dir (TARGET_BUILD_DIR)
TARGET_CORE_DIR := $(CONFIG_TARGET_CORE)

TARGET_BUILD     := Debug
TARGET_BUILD_DIR := build

################################################################################
# FPU configuration
################################################################################

# Default (do not override directly, use CONFIG_FPU)
CONFIG_FPU := hard

################################################################################
# Modules to compile
################################################################################

BUILD_BOOT                     := 1

BUILD_PLATFORM_BOARD           := 1
BUILD_PLATFORM_CLOCK           := 1
BUILD_PLATFORM_CMSIS           := 1
BUILD_PLATFORM_IRQ             := 1
BUILD_PLATFORM_MCU             := 1

BUILD_DRIVERS_DMA              := 1
BUILD_DRIVERS_GPIO             := 1
BUILD_DRIVERS_SARADC           := 0
BUILD_DRIVERS_SPI              := 1
BUILD_DRIVERS_CAN              := 1
BUILD_DRIVERS_UART             := 0

BUILD_OS_OSAL                  := 1
BUILD_OS_FREERTOS              := 0

################################################################################
# Release configuration
################################################################################

# Release file basename
PACK_RELEASE_NAME := release

# Space separated directory name to exclude from packaging
PACK_EXCLUDE_DIRS :=

################################################################################
# Documentation configuration
################################################################################

# Documentation version
DOCS_VERSION := x.y.z

# Space separated modules to be included into documentation
DOCS_MODULES :=

# Space separated tests to be included into documentation
#   SDKTests: including all tests
#DOCS_TESTS := SDKTests //SDKTests not included in doxygen documentation

################################################################################
# Image formats to generate (ELF generated by default)
################################################################################

GENERATE_BIN_IMAGE  := 1
GENERATE_HEX_IMAGE  := 1
GENERATE_SREC_IMAGE := 1

################################################################################
# Build system configuration
################################################################################

# Set to 1 to display executed commands
VERBOSE := 0

# Toolchain selection
TOOLCHAIN := ARM

################################################################################
# Add project files
################################################################################

# C sources
C_SRCS := \
	$(PROJECT_COMMON_DIR)/src/test_env.c

# Assembly sources
A_SRCS :=

# C includes
C_INCS := \
	$(PROJECT_COMMON_DIR)/include

# Assembly includes
A_INCS :=

ifeq ($(TOOLCHAIN), ARMCLANG) 
# C defines
C_DEFS := USE_ARMCLANG
C_DEFS += C_ARMCLANG_SYMB
# Assembly defines
A_DEFS := USE_ARMCLANG
A_DEFS += ASM_ARMCLANG_SYMB
else
# C defines
C_DEFS := DEVICE_NAME=$(CONFIG_DEVICE) BOARD_NAME=$(CONFIG_BOARD)

# Assembly defines
A_DEFS :=
endif

# C options
C_OPTS :=

# Assembly options
A_OPTS :=

# List file options
LST_OPTS =

# Dependencies options
DEP_OPTS =

# Preprocessor Language options
LANG_OPTS :=

# Binary image options
BIN_OPTS :=

# Intel Hexadecimal image options
HEX_OPTS :=

# Motorola S-Record image options
SREC_OPTS :=

# Size options
SIZE_OPTS :=

# Output options for image tools
OUT_OPTS :=

################################################################################
# Linker script files
################################################################################

# Set to ram or nvm
CONFIG_TARGET_MEMORY := flash

# For SR5E1, 'flash' is an alias for 'nvm'
ifeq ($(CONFIG_DEVICE), sr5e1)
ifeq ($(CONFIG_TARGET_MEMORY), flash)
override CONFIG_TARGET_MEMORY = nvm
endif
endif

# Linker script name
ifeq ($(TOOLCHAIN), ARM)
LINKER_SCRIPT_NAME := application-gcc-m7.ld
else ifeq ($(TOOLCHAIN), HIGHTEC)
LINKER_SCRIPT_NAME := application-hightec-m7.ld
else ifeq ($(TOOLCHAIN), ARMCLANG)
LINKER_SCRIPT_NAME := application-armclang-m7.scat
else ifeq ($(TOOLCHAIN), GHS)
LINKER_SCRIPT_NAME := application-ghs-m7.ld
else ifeq ($(TOOLCHAIN), IAR)
LINKER_SCRIPT_NAME := application-iar-m7.icf
endif

LINKER_SCRIPT_SOURCE := $(PROJECT_COMMON_DIR)/rsc/$(LINKER_SCRIPT_NAME).E

# Linker script include
LINKER_SCRIPT_INCS := \
	$(PROJECT_COMMON_DIR)/rsc/$(CONFIG_DEVICE)

# NVM to use for linking (it could be RAM)
EMBED_NVM := $(CONFIG_TARGET_CORE)_$(CONFIG_TARGET_MEMORY)

# RAM used for execution
EMBED_RAM := $(CONFIG_TARGET_CORE)_ram

# TCM Memories
EMBED_ITCM := $(CONFIG_TARGET_CORE)_itcm_dir
EMBED_DTCM := $(CONFIG_TARGET_CORE)_dtcm_dir

# Exceptions stack size
MAIN_STACK_SIZE := 4k

# Process stack size
PROCESS_STACK_SIZE := 4k

# Linker script defines
LINKER_SCRIPT_DEFS := EMBED_NVM=$(EMBED_NVM)
LINKER_SCRIPT_DEFS += EMBED_RAM=$(EMBED_RAM)
LINKER_SCRIPT_DEFS += EMBED_ITCM=$(EMBED_ITCM)
LINKER_SCRIPT_DEFS += EMBED_DTCM=$(EMBED_DTCM)
LINKER_SCRIPT_DEFS += MAIN_STACK_SIZE=$(MAIN_STACK_SIZE)
LINKER_SCRIPT_DEFS += PROCESS_STACK_SIZE=$(PROCESS_STACK_SIZE)

ifeq ($(TOOLCHAIN), GHS)
ifeq ($(CONFIG_TARGET_MEMORY), nvm)
LINKER_SCRIPT_DEFS += MEM_START="ADDR(EMBED_RAM)"
else
LINKER_SCRIPT_DEFS += MEM_START=__bss_start__
endif
else ifeq ($(TOOLCHAIN), IAR)
# Heap size (Heap size must be specified only for IAR compiler, since
# other compilers use as HEAP all the unused RAM.
HEAP_SIZE := 1k
LINKER_SCRIPT_DEFS += HEAP_SIZE=$(HEAP_SIZE)
LINKER_SCRIPT_DEFS += INTVEC_START="__region_$(EMBED_NVM)_start__"
LINKER_SCRIPT_DEFS += RESET_HANDLER_START="__region_$(EMBED_NVM)_start__"
LINKER_SCRIPT_DEFS += ROM_START="__region_$(EMBED_NVM)_start__"
LINKER_SCRIPT_DEFS += ROM_END="__region_$(EMBED_NVM)_end__"
LINKER_SCRIPT_DEFS += RAM_START="__region_$(EMBED_RAM)_start__"
LINKER_SCRIPT_DEFS += RAM_END="__region_$(EMBED_RAM)_end__"
LINKER_SCRIPT_DEFS += ITCM_START="__region_$(EMBED_ITCM)_start__"
LINKER_SCRIPT_DEFS += ITCM_END="__region_$(EMBED_ITCM)_end__"
LINKER_SCRIPT_DEFS += DTCM_START="__region_$(EMBED_DTCM)_start__"
LINKER_SCRIPT_DEFS += DTCM_END="__region_$(EMBED_DTCM)_end__"
ifeq ($(CONFIG_TARGET_MEMORY), nvm)
LINKER_SCRIPT_DEFS += EMBED_REGION="ROM_region"
else
LINKER_SCRIPT_DEFS += EMBED_REGION="RAM_region"
endif
else
ifeq ($(CONFIG_TARGET_MEMORY), nvm)
LINKER_SCRIPT_DEFS += DATA_SEC_ORIGIN="ORIGIN(EMBED_RAM)"
LINKER_SCRIPT_DEFS += DATA_SEC_RELOC_AT="AT>"
LINKER_SCRIPT_DEFS += DATA_SEC_RELOC=EMBED_NVM
LINKER_SCRIPT_DEFS += MEM_START="ORIGIN(EMBED_RAM)"
else
LINKER_SCRIPT_DEFS += DATA_SEC_ORIGIN=""
LINKER_SCRIPT_DEFS += DATA_SEC_RELOC_AT=""
LINKER_SCRIPT_DEFS += DATA_SEC_RELOC=""
LINKER_SCRIPT_DEFS += MEM_START=__bss_start__
endif
endif

################################################################################
# Test specific common targets.
################################################################################

pre-build::
	-$(AT)$(RM) $(TARGET_BUILD_DIR)/$(LINKER_SCRIPT_NAME)

